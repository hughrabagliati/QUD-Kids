require(doBy)#
require(lme4)#
require(XLConnect)#
#
# Import the data and tidy up the column names etc#
data_import <- function(path_name,type = "Homoph"){ #
	print(paste("Importing", type))#
	data.set = c()#
	file.list <- list.files(path = path_name,full.names = T)#
	print(file.list)#
	for (i in unique(file.list)){#
		data.set = rbind(data.set, readWorksheetFromFile(i, sheet=1))#
	}#
	return(data.set)#
	}
Functions for basic data analysis.#
# Function to tell you whether participants looked to Instrument on each trial#
# The last SummaryBy statement can be modified to look at only the first X gazes, currently set at 4 to capture the first 3 eye movements (1 is starting point), currently #
LooksToInst = function(data){#
require(plyr)#
data = ddply(data,~Name.+Trial,transform,NextCode = c(Code[2:(length(Code))],Code[length(Code)]))#
data$SwitInst = 0#
data[data$NextCode %in% c("TI"),]$SwitInst = 1#
data = ddply(data,~Name.+Trial,transform,LookEnd = c(TimeFrame[2:(length(TimeFrame))],TimeFrame[length(TimeFrame)]))#
data$LookTime = data$LookEnd - data$TimeFrame#
if ("RC" %in% colnames(data)){#
data.Look <- summaryBy(Inst+SwitInst~Cond+Pop+Name.+ItemNo+ExOrd, data = data[ data$LookTime > 0,], FUN = sum) # This and the above 3 lines ensure that we don't count any 1-frame-long looks, eg the last line of each trial in the datafile. #
}#
else data.Look <- summaryBy(Inst+SwitInst~Cond+Name.+ItemNo, data = data[ data$LookTime > 0,], FUN = sum) # This and the above 3 lines ensure that we don't count any 1-frame-long looks, eg the last line of each trial in the datafile. #
data.Look$Inst = 0#
data.Look[data.Look$Inst.sum > 0,]$Inst = 1#
return(data.Look)#
}#
########
proc_subj.NoExpand = function(filename,Timing,PlaceCodes){#
require(gdata)#
subj = read.xls(filename, sheet=2)#
#subj = filename#
PlaceCodes$Cond = "Inst"#
if (length(subj$Action.) > 1){#
  if (grepl("-A",filename) == TRUE){ #
  	PlaceCodes[PlaceCodes$ItemNo %in% c("T5","T7","T3","T2"),]$Cond = "Mod"} #
  else{#
  	PlaceCodes[!PlaceCodes$ItemNo %in% c("T5","T7","T3","T2"),]$Cond = "Mod"}#
  PlaceCodes$Cond = as.factor(PlaceCodes$Cond)#
  subj = merge(subj,PlaceCodes, by.x = "Trial",by.y = "ItemNo", sort = FALSE)#
#
  subj = merge(subj,Timing, by.x = "Verb",by.y = "Verb", sort = FALSE)#
}#
#
subj$Marker.Name = as.character(subj$Marker.Name)#
subj$Marker.Name = gsub(" ","",subj$Marker.Name)#
subj$Code = NA#
subj$Code = subj$Marker.Name#
#
for (i in unique(PlaceCodes$ItemNo)){#
	if (length(subj[subj$Trial == i & subj$Marker.Name == "UL",]$Code) > 0){subj[subj$Trial == i & subj$Marker.Name == "UL",]$Code = as.character(PlaceCodes[PlaceCodes$ItemNo == i ,]$UL)}#
	if (length(subj[subj$Trial == i & subj$Marker.Name == "UR",]$Code) > 0){subj[subj$Trial == i & subj$Marker.Name == "UR",]$Code = as.character(PlaceCodes[PlaceCodes$ItemNo == i ,]$UR)}#
	if (length(subj[subj$Trial == i & subj$Marker.Name == "LL",]$Code) > 0){subj[subj$Trial == i & subj$Marker.Name == "LL",]$Code = as.character(PlaceCodes[PlaceCodes$ItemNo == i ,]$LL)}#
	if (length(subj[subj$Trial == i & subj$Marker.Name == "LR",]$Code) > 0){subj[subj$Trial == i & subj$Marker.Name == "LR",]$Code = as.character(PlaceCodes[PlaceCodes$ItemNo == i ,]$LR)}#
	}#
subj$Hour = read.table(textConnection(as.character(subj$Start)), sep = ":")[,1]#
subj$Min = read.table(textConnection(as.character(subj$Start)), sep = ":")[,2]#
subj$Sec = read.table(textConnection(as.character(subj$Start)), sep = ":")[,3]#
subj$Frame = read.table(textConnection(as.character(subj$Start)), sep = ":")[,4]#
subj$FullTimeFrame = subj$Frame+(subj$Sec*30)+(subj$Min*1798)+(subj$Hour*107892)#
subj$TimeFrame = NA#
for (i in unique(subj$Trial)){#
	subj[subj$Trial == i,]$TimeFrame = subj[subj$Trial == i,]$FullTimeFrame - min(subj[subj$Trial == i,]$FullTimeFrame)#
	}	#
subj -> FullSubj#
#
FullSubj$Inst = 0#
if (length(FullSubj[FullSubj$Code == "TI",]$Inst>0)){FullSubj[FullSubj$Code == "TI",]$Inst = 1}#
#
FullSubj$TA = 0#
if (length(FullSubj[FullSubj$Code == "TA",]$TA>0)){FullSubj[FullSubj$Code == "TA",]$TA =  1}#
#
FullSubj$DI = 0#
if (length(FullSubj[FullSubj$Code == "DI",]$DI>0)){FullSubj[FullSubj$Code == "DI",]$DI = 1}#
#
FullSubj$DA = 0#
if (length(FullSubj[FullSubj$Code == "DA",]$DA > 0)){FullSubj[FullSubj$Code == "DA",]$DA = 1}#
#
return(FullSubj)#
}
This script is used to read in all the csv files in a folder.#
#
library(doBy)#
#
ET_Import.NoExpand = function(path_name,Timing,PlaceCodes){#
list.files(path = path_name,full.names = T, pattern = ".xlsx") -> file_list#
#
ET = c()#
for (x in file_list){#
	FullSubj = proc_subj.NoExpand(x,Timing,PlaceCodes)#
	ET = rbind(ET,FullSubj)#
	print(x)#
	}#
	return(ET)#
}
Graphing Scripts#
#
library(doBy)#
	library(plyr)#
	library(car)#
#
	# Graphing funciton#
	one.way.plot = function(DV,IV1,SubjNo,x.label ="Add X Label", main.label = "Add main header"){#
		print("Logit Transform DV")#
	    logit(DV) -> DV#
	    tapply(DV, INDEX = list(IV1), FUN = mean,na.rm = T) -> graph.data#
	    tapply(DV, INDEX = list(IV1), FUN = sd, na.rm = T) -> graph.se#
	    graph.se/sqrt(length(unique(SubjNo))) -> graph.se#
	    barplot(graph.data, beside = T, col = c("white"), ylim = c(-4,1), ylab = "Log Odds Instrument Action", xlab = x.label, main = main.label, border = NA) -> dat.g#
	    rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "lightgray")#
	    abline(h=(seq(-3,1)), col="black", lty="dotted")#
	    legend(4.5,1.3,rownames(graph.data), fill = c("red","blue"))#
	    points(dat.g, graph.data, col = c("red","blue"), bg = c("red","blue"), pch = 22, cex = 6)#
	   arrows(dat.g, (graph.data+graph.se), dat.g, (graph.data-graph.se), angle = 90, lwd = 2, lty = 1, code = 0)#
	}
library(plyr)#
library(car)#
# QUD Processing scripts#
Timing = read.csv("Timing.csv",header = T)#
PlaceCodes = read.csv("PlaceCodes.csv",header =  T)#
QUD = ET_Import.NoExpand("./SubjData/",Timing,PlaceCodes)#
#
QUD.Look = LooksToInst(QUD)#
#
one.way.plot(QUD.Look$Inst, QUD.Look$Cond, QUD.Look$Name, x.label = "Condition", main.label = "QUD")#
#
lmer(Inst~Cond + (1+Cond|Name.)+(1+Cond|ItemNo), data= QUD.Look, family = "binomial")
summaryBy(Inst~Cond, data = QUD.Look)
library(plyr)#
library(car)#
# QUD Processing scripts#
Timing = read.csv("Timing.csv",header = T)#
PlaceCodes = read.csv("PlaceCodes.csv",header =  T)#
QUD = ET_Import.NoExpand("./SubjData/",Timing,PlaceCodes)#
#
QUD.Look = LooksToInst(QUD)#
#
one.way.plot(QUD.Look$Inst, QUD.Look$Cond, QUD.Look$Name, x.label = "Condition", main.label = "QUD")#
#
lmer(Inst~Cond + (1+Cond|Name.)+(1+Cond|ItemNo), data= QUD.Look, family = "binomial")
Graphing Scripts#
#
library(doBy)#
	library(plyr)#
	library(car)#
#
	# Graphing funciton#
	one.way.plot = function(DV,IV1,SubjNo,x.label ="Add X Label", main.label = "Add main header"){#
		print("Logit Transform DV")#
	    #logit(DV) -> DV#
	    tapply(DV, INDEX = list(IV1), FUN = mean,na.rm = T) -> graph.data#
	    tapply(DV, INDEX = list(IV1), FUN = sd, na.rm = T) -> graph.se#
	    graph.se/sqrt(length(unique(SubjNo))) -> graph.se#
	    barplot(graph.data, beside = T, col = c("white"), ylim = c(0,1), ylab = "Log Odds Instrument Action", xlab = x.label, main = main.label, border = NA) -> dat.g#
	    rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "lightgray")#
	    abline(h=(seq(-3,1)), col="black", lty="dotted")#
	    legend(4.5,1.3,rownames(graph.data), fill = c("red","blue"))#
	    points(dat.g, graph.data, col = c("red","blue"), bg = c("red","blue"), pch = 22, cex = 6)#
	   arrows(dat.g, (graph.data+graph.se), dat.g, (graph.data-graph.se), angle = 90, lwd = 2, lty = 1, code = 0)#
	}
library(plyr)#
library(car)#
# QUD Processing scripts#
Timing = read.csv("Timing.csv",header = T)#
PlaceCodes = read.csv("PlaceCodes.csv",header =  T)#
QUD = ET_Import.NoExpand("./SubjData/",Timing,PlaceCodes)#
#
QUD.Look = LooksToInst(QUD)#
#
one.way.plot(QUD.Look$Inst, QUD.Look$Cond, QUD.Look$Name, x.label = "Condition", main.label = "QUD")#
#
lmer(Inst~Cond + (1+Cond|Name.)+(1+Cond|ItemNo), data= QUD.Look, family = "binomial")
Graphing Scripts#
#
library(doBy)#
	library(plyr)#
	library(car)#
#
	# Graphing funciton#
	one.way.plot = function(DV,IV1,SubjNo,x.label ="Add X Label", main.label = "Add main header"){#
		print("Logit Transform DV")#
	    #logit(DV) -> DV#
	    tapply(DV, INDEX = list(IV1), FUN = mean,na.rm = T) -> graph.data#
	    tapply(DV, INDEX = list(IV1), FUN = sd, na.rm = T) -> graph.se#
	    graph.se/sqrt(length(unique(SubjNo))) -> graph.se#
	    barplot(graph.data, beside = T, col = c("white"), ylim = c(0,1), ylab = "Proportion trials with looks to Instrument", xlab = x.label, border = NA) -> dat.g#
	    rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "lightgray")#
	    abline(h=(seq(-3,1)), col="black", lty="dotted")#
	    legend(4.5,1.3,rownames(graph.data), fill = c("red","blue"))#
	    points(dat.g, graph.data, col = c("red","blue"), bg = c("red","blue"), pch = 22, cex = 6)#
	   arrows(dat.g, (graph.data+graph.se), dat.g, (graph.data-graph.se), angle = 90, lwd = 2, lty = 1, code = 0)#
	}
one.way.plot(QUD.Look$Inst, QUD.Look$Cond, QUD.Look$Name, x.label = "Type of question", main.label = "QUD")
subj = read.xls(combined.xls, sheet=1)
subj = read.xls(Combined.xlsx, sheet=1)
subj = read.xls(Combined, sheet=1)
subj = read.xls("Combined.xlsx", sheet=1)
summary(subj)
summaryBy(Instrument.do.they.use.the.big.instrument..~Condition, data = subj)
Graphing Scripts#
#
library(doBy)#
	library(plyr)#
	library(car)#
#
	# Graphing funciton#
	one.way.plot = function(DV,IV1,SubjNo,x.label ="Add X Label", main.label = "Add main header"){#
		print("Logit Transform DV")#
	    logit(DV) -> DV#
	    tapply(DV, INDEX = list(IV1), FUN = mean,na.rm = T) -> graph.data#
	    tapply(DV, INDEX = list(IV1), FUN = sd, na.rm = T) -> graph.se#
	    graph.se/sqrt(length(unique(SubjNo))) -> graph.se#
	    barplot(graph.data, beside = T, col = c("white"), ylim = c(-4,1), ylab = "Log Odds Instrument Action", xlab = x.label, main = main.label, border = NA) -> dat.g#
	    rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "lightgray")#
	    abline(h=(seq(-3,1)), col="black", lty="dotted")#
	    legend(4.5,1.3,rownames(graph.data), fill = c("red","blue"))#
	    points(dat.g, graph.data, col = c("red","blue"), bg = c("red","blue"), pch = 22, cex = 6)#
	   arrows(dat.g, (graph.data+graph.se), dat.g, (graph.data-graph.se), angle = 90, lwd = 2, lty = 1, code = 0)#
	}
one.way.plot(subj$Instrument.do.they.use.the.big.instrument.., subj$Cond, subj$Name, x.label = "Type of question", main.label = "QUD")
one.way.plot(subj$Instrument.do.they.use.the.big.instrument.., subj$Cond, subj$SubjNo, x.label = "Type of question", main.label = "QUD")
Graphing Scripts#
#
library(doBy)#
	library(plyr)#
	library(car)#
#
	# Graphing funciton#
	one.way.plot = function(DV,IV1,SubjNo,x.label ="Add X Label", main.label = "Add main header"){#
		print("Logit Transform DV")#
	    logit(DV) -> DV#
	    tapply(DV, INDEX = list(IV1), FUN = mean,na.rm = T) -> graph.data#
	    tapply(DV, INDEX = list(IV1), FUN = sd, na.rm = T) -> graph.se#
	    graph.se/sqrt(length(unique(SubjNo))) -> graph.se#
	    barplot(graph.data, beside = T, col = c("white"), ylim = c(0,1), ylab = "Proportion of Instrument Actions", xlab = x.label, main = main.label, border = NA) -> dat.g#
	    rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "lightgray")#
	    abline(h=(seq(-3,1)), col="black", lty="dotted")#
	    legend(4.5,1.3,rownames(graph.data), fill = c("red","blue"))#
	    points(dat.g, graph.data, col = c("red","blue"), bg = c("red","blue"), pch = 22, cex = 6)#
	   arrows(dat.g, (graph.data+graph.se), dat.g, (graph.data-graph.se), angle = 90, lwd = 2, lty = 1, code = 0)#
	}
one.way.plot(subj$Instrument.do.they.use.the.big.instrument.., subj$Cond, subj$SubjNo, x.label = "Type of question", main.label = "QUD")
Graphing Scripts#
#
library(doBy)#
	library(plyr)#
	library(car)#
#
	# Graphing funciton#
	one.way.plot = function(DV,IV1,SubjNo,x.label ="Add X Label", main.label = "Add main header"){#
		print("Logit Transform DV")#
	    #logit(DV) -> DV#
	    tapply(DV, INDEX = list(IV1), FUN = mean,na.rm = T) -> graph.data#
	    tapply(DV, INDEX = list(IV1), FUN = sd, na.rm = T) -> graph.se#
	    graph.se/sqrt(length(unique(SubjNo))) -> graph.se#
	    barplot(graph.data, beside = T, col = c("white"), ylim = c(0,1), ylab = "Proportion of Instrument Actions", xlab = x.label, main = main.label, border = NA) -> dat.g#
	    rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "lightgray")#
	    abline(h=(seq(-3,1)), col="black", lty="dotted")#
	    legend(4.5,1.3,rownames(graph.data), fill = c("red","blue"))#
	    points(dat.g, graph.data, col = c("red","blue"), bg = c("red","blue"), pch = 22, cex = 6)#
	   arrows(dat.g, (graph.data+graph.se), dat.g, (graph.data-graph.se), angle = 90, lwd = 2, lty = 1, code = 0)#
	}
one.way.plot(subj$Instrument.do.they.use.the.big.instrument.., subj$Cond, subj$SubjNo, x.label = "Type of question", main.label = "QUD")
Graphing Scripts#
#
library(doBy)#
	library(plyr)#
	library(car)#
#
	# Graphing funciton#
	one.way.plot = function(DV,IV1,SubjNo,x.label ="Add X Label", main.label = "Add main header"){#
		print("Logit Transform DV")#
	    #logit(DV) -> DV#
	    tapply(DV, INDEX = list(IV1), FUN = mean,na.rm = T) -> graph.data#
	    tapply(DV, INDEX = list(IV1), FUN = sd, na.rm = T) -> graph.se#
	    graph.se/sqrt(length(unique(SubjNo))) -> graph.se#
	    barplot(graph.data, beside = T, col = c("white"), ylim = c(0,1), ylab = "Proportion of Instrument Actions", xlab = x.label, border = NA) -> dat.g#
	    rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "lightgray")#
	    abline(h=(seq(-3,1)), col="black", lty="dotted")#
	    legend(4.5,1.3,rownames(graph.data), fill = c("red","blue"))#
	    points(dat.g, graph.data, col = c("red","blue"), bg = c("red","blue"), pch = 22, cex = 6)#
	   arrows(dat.g, (graph.data+graph.se), dat.g, (graph.data-graph.se), angle = 90, lwd = 2, lty = 1, code = 0)#
	}
one.way.plot(subj$Instrument.do.they.use.the.big.instrument.., subj$Cond, subj$SubjNo, x.label = "Type of question", main.label = "QUD")
